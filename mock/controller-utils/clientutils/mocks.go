// // SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// // SPDX-License-Identifier: Apache-2.0
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ironcore-dev/controller-utils/clientutils (interfaces: PatchProvider)
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../hack/boilerplate.go.txt -package clientutils -destination=mocks.go github.com/ironcore-dev/controller-utils/clientutils PatchProvider
//

// Package clientutils is a generated GoMock package.
package clientutils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockPatchProvider is a mock of PatchProvider interface.
type MockPatchProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPatchProviderMockRecorder
}

// MockPatchProviderMockRecorder is the mock recorder for MockPatchProvider.
type MockPatchProviderMockRecorder struct {
	mock *MockPatchProvider
}

// NewMockPatchProvider creates a new mock instance.
func NewMockPatchProvider(ctrl *gomock.Controller) *MockPatchProvider {
	mock := &MockPatchProvider{ctrl: ctrl}
	mock.recorder = &MockPatchProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatchProvider) EXPECT() *MockPatchProviderMockRecorder {
	return m.recorder
}

// PatchFor mocks base method.
func (m *MockPatchProvider) PatchFor(arg0 client.Object) client.Patch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFor", arg0)
	ret0, _ := ret[0].(client.Patch)
	return ret0
}

// PatchFor indicates an expected call of PatchFor.
func (mr *MockPatchProviderMockRecorder) PatchFor(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFor", reflect.TypeOf((*MockPatchProvider)(nil).PatchFor), arg0)
}
